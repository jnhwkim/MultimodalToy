name: "LeNet_Joint"
layer {
  name: "mnist"
  type: "Data"
  top: "dataL"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "caffe/tr_l_ldb"
    batch_size: 64
    backend: LEVELDB
  }
}
layer {
  name: "mnist"
  type: "Data"
  top: "dataL"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "caffe/te_l_ldb"
    batch_size: 100
    backend: LEVELDB
  }
}
layer {
  name: "conv1L"
  type: "Convolution"
  bottom: "dataL"
  top: "conv1L"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1L"
  type: "Pooling"
  bottom: "conv1L"
  top: "pool1L"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2L"
  type: "Convolution"
  bottom: "pool1L"
  top: "conv2L"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2L"
  type: "Pooling"
  bottom: "conv2L"
  top: "pool2L"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1L"
  type: "InnerProduct"
  bottom: "pool2L"
  top: "ip1L"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1L"
  type: "ReLU"
  bottom: "ip1L"
  top: "ip1L"
}
layer {
  name: "mnist"
  type: "Data"
  top: "dataR"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "caffe/tr_r_ldb"
    batch_size: 64
    backend: LEVELDB
  }
}
layer {
  name: "mnist"
  type: "Data"
  top: "dataR"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "caffe/te_r_ldb"
    batch_size: 100
    backend: LEVELDB
  }
}
layer {
  name: "conv1R"
  type: "Convolution"
  bottom: "dataR"
  top: "conv1R"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1R"
  type: "Pooling"
  bottom: "conv1R"
  top: "pool1R"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2R"
  type: "Convolution"
  bottom: "pool1R"
  top: "conv2R"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2R"
  type: "Pooling"
  bottom: "conv2R"
  top: "pool2R"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1R"
  type: "InnerProduct"
  bottom: "pool2R"
  top: "ip1R"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1R"
  type: "ReLU"
  bottom: "ip1R"
  top: "ip1R"
}
layer {
  name: "ip2L"
  type: "InnerProduct"
  bottom: "ip1L"
  top: "ip2L"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2L"
  type: "ReLU"
  bottom: "ip2L"
  top: "ip2L"
}
layer {
  name: "ip2R"
  type: "InnerProduct"
  bottom: "ip1R"
  top: "ip2R"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2R"
  type: "ReLU"
  bottom: "ip2R"
  top: "ip2R"
}
layer {
  name: "flatdataL"
  type: "Flatten"
  bottom: "ip2L"
  top: "flatdataL"
  param {
    lr_mult: 0
  }
}
layer {
  name: "flatdataR"
  type: "Flatten"
  bottom: "ip2R"
  top: "flatdataR"
  param {
    lr_mult: 0
  }
}
layer {
  name: "lossL"
  type: "SigmoidCrossEntropyLoss"
  bottom: "ip2R"
  bottom: "flatdataL"
  top: "cross_entropy_lossL"
}
layer {
  name: "lossR"
  type: "SigmoidCrossEntropyLoss"
  bottom: "ip2L"
  bottom: "flatdataR"
  top: "cross_entropy_lossR"
  loss_weight: 1
}